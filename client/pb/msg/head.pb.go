// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: head.proto

package msg

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type C2CHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUin       *uint64 `protobuf:"varint,1,opt,name=toUin" json:"toUin,omitempty"`
	FromUin     *uint64 `protobuf:"varint,2,opt,name=fromUin" json:"fromUin,omitempty"`
	CcType      *uint32 `protobuf:"varint,3,opt,name=ccType" json:"ccType,omitempty"`
	CcCmd       *uint32 `protobuf:"varint,4,opt,name=ccCmd" json:"ccCmd,omitempty"`
	AuthPicSig  []byte  `protobuf:"bytes,5,opt,name=authPicSig" json:"authPicSig,omitempty"`
	AuthSig     []byte  `protobuf:"bytes,6,opt,name=authSig" json:"authSig,omitempty"`
	AuthBuf     []byte  `protobuf:"bytes,7,opt,name=authBuf" json:"authBuf,omitempty"`
	ServerTime  *uint32 `protobuf:"varint,8,opt,name=serverTime" json:"serverTime,omitempty"`
	ClientTime  *uint32 `protobuf:"varint,9,opt,name=clientTime" json:"clientTime,omitempty"`
	Rand        *uint32 `protobuf:"varint,10,opt,name=rand" json:"rand,omitempty"`
	PhoneNumber *string `protobuf:"bytes,11,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
}

func (x *C2CHead) Reset() {
	*x = C2CHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2CHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2CHead) ProtoMessage() {}

func (x *C2CHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2CHead.ProtoReflect.Descriptor instead.
func (*C2CHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{0}
}

func (x *C2CHead) GetToUin() uint64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

func (x *C2CHead) GetFromUin() uint64 {
	if x != nil && x.FromUin != nil {
		return *x.FromUin
	}
	return 0
}

func (x *C2CHead) GetCcType() uint32 {
	if x != nil && x.CcType != nil {
		return *x.CcType
	}
	return 0
}

func (x *C2CHead) GetCcCmd() uint32 {
	if x != nil && x.CcCmd != nil {
		return *x.CcCmd
	}
	return 0
}

func (x *C2CHead) GetAuthPicSig() []byte {
	if x != nil {
		return x.AuthPicSig
	}
	return nil
}

func (x *C2CHead) GetAuthSig() []byte {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

func (x *C2CHead) GetAuthBuf() []byte {
	if x != nil {
		return x.AuthBuf
	}
	return nil
}

func (x *C2CHead) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *C2CHead) GetClientTime() uint32 {
	if x != nil && x.ClientTime != nil {
		return *x.ClientTime
	}
	return 0
}

func (x *C2CHead) GetRand() uint32 {
	if x != nil && x.Rand != nil {
		return *x.Rand
	}
	return 0
}

func (x *C2CHead) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

type CSHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin           *uint64 `protobuf:"varint,1,opt,name=uin" json:"uin,omitempty"`
	Command       *uint32 `protobuf:"varint,2,opt,name=command" json:"command,omitempty"`
	Seq           *uint32 `protobuf:"varint,3,opt,name=seq" json:"seq,omitempty"`
	Version       *uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	RetryTimes    *uint32 `protobuf:"varint,5,opt,name=retryTimes" json:"retryTimes,omitempty"`
	ClientType    *uint32 `protobuf:"varint,6,opt,name=clientType" json:"clientType,omitempty"`
	Pubno         *uint32 `protobuf:"varint,7,opt,name=pubno" json:"pubno,omitempty"`
	Localid       *uint32 `protobuf:"varint,8,opt,name=localid" json:"localid,omitempty"`
	Timezone      *uint32 `protobuf:"varint,9,opt,name=timezone" json:"timezone,omitempty"`
	ClientIp      *uint32 `protobuf:"fixed32,10,opt,name=clientIp" json:"clientIp,omitempty"`
	ClientPort    *uint32 `protobuf:"varint,11,opt,name=clientPort" json:"clientPort,omitempty"`
	ConnIp        *uint32 `protobuf:"fixed32,12,opt,name=connIp" json:"connIp,omitempty"`
	ConnPort      *uint32 `protobuf:"varint,13,opt,name=connPort" json:"connPort,omitempty"`
	InterfaceIp   *uint32 `protobuf:"fixed32,14,opt,name=interfaceIp" json:"interfaceIp,omitempty"`
	InterfacePort *uint32 `protobuf:"varint,15,opt,name=interfacePort" json:"interfacePort,omitempty"`
	ActualIp      *uint32 `protobuf:"fixed32,16,opt,name=actualIp" json:"actualIp,omitempty"`
	Flag          *uint32 `protobuf:"varint,17,opt,name=flag" json:"flag,omitempty"`
	Timestamp     *uint32 `protobuf:"fixed32,18,opt,name=timestamp" json:"timestamp,omitempty"`
	Subcmd        *uint32 `protobuf:"varint,19,opt,name=subcmd" json:"subcmd,omitempty"`
	Result        *uint32 `protobuf:"varint,20,opt,name=result" json:"result,omitempty"`
	AppId         *uint32 `protobuf:"varint,21,opt,name=appId" json:"appId,omitempty"`
	InstanceId    *uint32 `protobuf:"varint,22,opt,name=instanceId" json:"instanceId,omitempty"`
	SessionId     *uint64 `protobuf:"varint,23,opt,name=sessionId" json:"sessionId,omitempty"`
	IdcId         *uint32 `protobuf:"varint,24,opt,name=idcId" json:"idcId,omitempty"`
}

func (x *CSHead) Reset() {
	*x = CSHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHead) ProtoMessage() {}

func (x *CSHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHead.ProtoReflect.Descriptor instead.
func (*CSHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{1}
}

func (x *CSHead) GetUin() uint64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *CSHead) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *CSHead) GetSeq() uint32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *CSHead) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CSHead) GetRetryTimes() uint32 {
	if x != nil && x.RetryTimes != nil {
		return *x.RetryTimes
	}
	return 0
}

func (x *CSHead) GetClientType() uint32 {
	if x != nil && x.ClientType != nil {
		return *x.ClientType
	}
	return 0
}

func (x *CSHead) GetPubno() uint32 {
	if x != nil && x.Pubno != nil {
		return *x.Pubno
	}
	return 0
}

func (x *CSHead) GetLocalid() uint32 {
	if x != nil && x.Localid != nil {
		return *x.Localid
	}
	return 0
}

func (x *CSHead) GetTimezone() uint32 {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return 0
}

func (x *CSHead) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *CSHead) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *CSHead) GetConnIp() uint32 {
	if x != nil && x.ConnIp != nil {
		return *x.ConnIp
	}
	return 0
}

func (x *CSHead) GetConnPort() uint32 {
	if x != nil && x.ConnPort != nil {
		return *x.ConnPort
	}
	return 0
}

func (x *CSHead) GetInterfaceIp() uint32 {
	if x != nil && x.InterfaceIp != nil {
		return *x.InterfaceIp
	}
	return 0
}

func (x *CSHead) GetInterfacePort() uint32 {
	if x != nil && x.InterfacePort != nil {
		return *x.InterfacePort
	}
	return 0
}

func (x *CSHead) GetActualIp() uint32 {
	if x != nil && x.ActualIp != nil {
		return *x.ActualIp
	}
	return 0
}

func (x *CSHead) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *CSHead) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CSHead) GetSubcmd() uint32 {
	if x != nil && x.Subcmd != nil {
		return *x.Subcmd
	}
	return 0
}

func (x *CSHead) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CSHead) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CSHead) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CSHead) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CSHead) GetIdcId() uint32 {
	if x != nil && x.IdcId != nil {
		return *x.IdcId
	}
	return 0
}

type DeltaHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLen  *uint64 `protobuf:"varint,1,opt,name=totalLen" json:"totalLen,omitempty"`
	Offset    *uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	AckOffset *uint64 `protobuf:"varint,3,opt,name=ackOffset" json:"ackOffset,omitempty"`
	Cookie    []byte  `protobuf:"bytes,4,opt,name=cookie" json:"cookie,omitempty"`
	AckCookie []byte  `protobuf:"bytes,5,opt,name=ackCookie" json:"ackCookie,omitempty"`
	Result    *uint32 `protobuf:"varint,6,opt,name=result" json:"result,omitempty"`
	Flags     *uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
}

func (x *DeltaHead) Reset() {
	*x = DeltaHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaHead) ProtoMessage() {}

func (x *DeltaHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaHead.ProtoReflect.Descriptor instead.
func (*DeltaHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{2}
}

func (x *DeltaHead) GetTotalLen() uint64 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *DeltaHead) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DeltaHead) GetAckOffset() uint64 {
	if x != nil && x.AckOffset != nil {
		return *x.AckOffset
	}
	return 0
}

func (x *DeltaHead) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *DeltaHead) GetAckCookie() []byte {
	if x != nil {
		return x.AckCookie
	}
	return nil
}

func (x *DeltaHead) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *DeltaHead) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type IMHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadType     *uint32       `protobuf:"varint,1,opt,name=headType" json:"headType,omitempty"`
	CsHead       *CSHead       `protobuf:"bytes,2,opt,name=csHead" json:"csHead,omitempty"`
	S2CHead      *S2CHead      `protobuf:"bytes,3,opt,name=s2CHead" json:"s2CHead,omitempty"`
	HttpconnHead *HttpConnHead `protobuf:"bytes,4,opt,name=httpconnHead" json:"httpconnHead,omitempty"`
	PaintFlag    *uint32       `protobuf:"varint,5,opt,name=paintFlag" json:"paintFlag,omitempty"`
	LoginSig     *LoginSig     `protobuf:"bytes,6,opt,name=loginSig" json:"loginSig,omitempty"`
	DeltaHead    *DeltaHead    `protobuf:"bytes,7,opt,name=deltaHead" json:"deltaHead,omitempty"`
	C2CHead      *C2CHead      `protobuf:"bytes,8,opt,name=c2CHead" json:"c2CHead,omitempty"`
}

func (x *IMHead) Reset() {
	*x = IMHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMHead) ProtoMessage() {}

func (x *IMHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMHead.ProtoReflect.Descriptor instead.
func (*IMHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{3}
}

func (x *IMHead) GetHeadType() uint32 {
	if x != nil && x.HeadType != nil {
		return *x.HeadType
	}
	return 0
}

func (x *IMHead) GetCsHead() *CSHead {
	if x != nil {
		return x.CsHead
	}
	return nil
}

func (x *IMHead) GetS2CHead() *S2CHead {
	if x != nil {
		return x.S2CHead
	}
	return nil
}

func (x *IMHead) GetHttpconnHead() *HttpConnHead {
	if x != nil {
		return x.HttpconnHead
	}
	return nil
}

func (x *IMHead) GetPaintFlag() uint32 {
	if x != nil && x.PaintFlag != nil {
		return *x.PaintFlag
	}
	return 0
}

func (x *IMHead) GetLoginSig() *LoginSig {
	if x != nil {
		return x.LoginSig
	}
	return nil
}

func (x *IMHead) GetDeltaHead() *DeltaHead {
	if x != nil {
		return x.DeltaHead
	}
	return nil
}

func (x *IMHead) GetC2CHead() *C2CHead {
	if x != nil {
		return x.C2CHead
	}
	return nil
}

type HttpConnHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin          *uint64        `protobuf:"varint,1,opt,name=uin" json:"uin,omitempty"`
	Command      *uint32        `protobuf:"varint,2,opt,name=command" json:"command,omitempty"`
	SubCommand   *uint32        `protobuf:"varint,3,opt,name=subCommand" json:"subCommand,omitempty"`
	Seq          *uint32        `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	Version      *uint32        `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	RetryTimes   *uint32        `protobuf:"varint,6,opt,name=retryTimes" json:"retryTimes,omitempty"`
	ClientType   *uint32        `protobuf:"varint,7,opt,name=clientType" json:"clientType,omitempty"`
	PubNo        *uint32        `protobuf:"varint,8,opt,name=pubNo" json:"pubNo,omitempty"`
	LocalId      *uint32        `protobuf:"varint,9,opt,name=localId" json:"localId,omitempty"`
	TimeZone     *uint32        `protobuf:"varint,10,opt,name=timeZone" json:"timeZone,omitempty"`
	ClientIp     *uint32        `protobuf:"fixed32,11,opt,name=clientIp" json:"clientIp,omitempty"`
	ClientPort   *uint32        `protobuf:"varint,12,opt,name=clientPort" json:"clientPort,omitempty"`
	QzhttpIp     *uint32        `protobuf:"fixed32,13,opt,name=qzhttpIp" json:"qzhttpIp,omitempty"`
	QzhttpPort   *uint32        `protobuf:"varint,14,opt,name=qzhttpPort" json:"qzhttpPort,omitempty"`
	SppIp        *uint32        `protobuf:"fixed32,15,opt,name=sppIp" json:"sppIp,omitempty"`
	SppPort      *uint32        `protobuf:"varint,16,opt,name=sppPort" json:"sppPort,omitempty"`
	Flag         *uint32        `protobuf:"varint,17,opt,name=flag" json:"flag,omitempty"`
	Key          []byte         `protobuf:"bytes,18,opt,name=key" json:"key,omitempty"`
	CompressType *uint32        `protobuf:"varint,19,opt,name=compressType" json:"compressType,omitempty"`
	OriginSize   *uint32        `protobuf:"varint,20,opt,name=originSize" json:"originSize,omitempty"`
	ErrorCode    *uint32        `protobuf:"varint,21,opt,name=errorCode" json:"errorCode,omitempty"`
	Redirect     *RedirectMsg   `protobuf:"bytes,22,opt,name=redirect" json:"redirect,omitempty"`
	CommandId    *uint32        `protobuf:"varint,23,opt,name=commandId" json:"commandId,omitempty"`
	ServiceCmdid *uint32        `protobuf:"varint,24,opt,name=serviceCmdid" json:"serviceCmdid,omitempty"`
	Oidbhead     *TransOidbHead `protobuf:"bytes,25,opt,name=oidbhead" json:"oidbhead,omitempty"`
}

func (x *HttpConnHead) Reset() {
	*x = HttpConnHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpConnHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnHead) ProtoMessage() {}

func (x *HttpConnHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnHead.ProtoReflect.Descriptor instead.
func (*HttpConnHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{4}
}

func (x *HttpConnHead) GetUin() uint64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *HttpConnHead) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *HttpConnHead) GetSubCommand() uint32 {
	if x != nil && x.SubCommand != nil {
		return *x.SubCommand
	}
	return 0
}

func (x *HttpConnHead) GetSeq() uint32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *HttpConnHead) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *HttpConnHead) GetRetryTimes() uint32 {
	if x != nil && x.RetryTimes != nil {
		return *x.RetryTimes
	}
	return 0
}

func (x *HttpConnHead) GetClientType() uint32 {
	if x != nil && x.ClientType != nil {
		return *x.ClientType
	}
	return 0
}

func (x *HttpConnHead) GetPubNo() uint32 {
	if x != nil && x.PubNo != nil {
		return *x.PubNo
	}
	return 0
}

func (x *HttpConnHead) GetLocalId() uint32 {
	if x != nil && x.LocalId != nil {
		return *x.LocalId
	}
	return 0
}

func (x *HttpConnHead) GetTimeZone() uint32 {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return 0
}

func (x *HttpConnHead) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *HttpConnHead) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *HttpConnHead) GetQzhttpIp() uint32 {
	if x != nil && x.QzhttpIp != nil {
		return *x.QzhttpIp
	}
	return 0
}

func (x *HttpConnHead) GetQzhttpPort() uint32 {
	if x != nil && x.QzhttpPort != nil {
		return *x.QzhttpPort
	}
	return 0
}

func (x *HttpConnHead) GetSppIp() uint32 {
	if x != nil && x.SppIp != nil {
		return *x.SppIp
	}
	return 0
}

func (x *HttpConnHead) GetSppPort() uint32 {
	if x != nil && x.SppPort != nil {
		return *x.SppPort
	}
	return 0
}

func (x *HttpConnHead) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *HttpConnHead) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HttpConnHead) GetCompressType() uint32 {
	if x != nil && x.CompressType != nil {
		return *x.CompressType
	}
	return 0
}

func (x *HttpConnHead) GetOriginSize() uint32 {
	if x != nil && x.OriginSize != nil {
		return *x.OriginSize
	}
	return 0
}

func (x *HttpConnHead) GetErrorCode() uint32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *HttpConnHead) GetRedirect() *RedirectMsg {
	if x != nil {
		return x.Redirect
	}
	return nil
}

func (x *HttpConnHead) GetCommandId() uint32 {
	if x != nil && x.CommandId != nil {
		return *x.CommandId
	}
	return 0
}

func (x *HttpConnHead) GetServiceCmdid() uint32 {
	if x != nil && x.ServiceCmdid != nil {
		return *x.ServiceCmdid
	}
	return 0
}

func (x *HttpConnHead) GetOidbhead() *TransOidbHead {
	if x != nil {
		return x.Oidbhead
	}
	return nil
}

type LoginSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Sig  []byte  `protobuf:"bytes,2,opt,name=sig" json:"sig,omitempty"`
}

func (x *LoginSig) Reset() {
	*x = LoginSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSig) ProtoMessage() {}

func (x *LoginSig) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSig.ProtoReflect.Descriptor instead.
func (*LoginSig) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{5}
}

func (x *LoginSig) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LoginSig) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type RedirectMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRedirectIp   *uint32 `protobuf:"fixed32,1,opt,name=lastRedirectIp" json:"lastRedirectIp,omitempty"`
	LastRedirectPort *uint32 `protobuf:"varint,2,opt,name=lastRedirectPort" json:"lastRedirectPort,omitempty"`
	RedirectIp       *uint32 `protobuf:"fixed32,3,opt,name=redirectIp" json:"redirectIp,omitempty"`
	RedirectPort     *uint32 `protobuf:"varint,4,opt,name=redirectPort" json:"redirectPort,omitempty"`
	RedirectCount    *uint32 `protobuf:"varint,5,opt,name=redirectCount" json:"redirectCount,omitempty"`
}

func (x *RedirectMsg) Reset() {
	*x = RedirectMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectMsg) ProtoMessage() {}

func (x *RedirectMsg) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectMsg.ProtoReflect.Descriptor instead.
func (*RedirectMsg) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{6}
}

func (x *RedirectMsg) GetLastRedirectIp() uint32 {
	if x != nil && x.LastRedirectIp != nil {
		return *x.LastRedirectIp
	}
	return 0
}

func (x *RedirectMsg) GetLastRedirectPort() uint32 {
	if x != nil && x.LastRedirectPort != nil {
		return *x.LastRedirectPort
	}
	return 0
}

func (x *RedirectMsg) GetRedirectIp() uint32 {
	if x != nil && x.RedirectIp != nil {
		return *x.RedirectIp
	}
	return 0
}

func (x *RedirectMsg) GetRedirectPort() uint32 {
	if x != nil && x.RedirectPort != nil {
		return *x.RedirectPort
	}
	return 0
}

func (x *RedirectMsg) GetRedirectCount() uint32 {
	if x != nil && x.RedirectCount != nil {
		return *x.RedirectCount
	}
	return 0
}

type S2CHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubMsgtype *uint32 `protobuf:"varint,1,opt,name=subMsgtype" json:"subMsgtype,omitempty"`
	MsgType    *uint32 `protobuf:"varint,2,opt,name=msgType" json:"msgType,omitempty"`
	FromUin    *uint64 `protobuf:"varint,3,opt,name=fromUin" json:"fromUin,omitempty"`
	MsgId      *uint32 `protobuf:"varint,4,opt,name=msgId" json:"msgId,omitempty"`
	RelayIp    *uint32 `protobuf:"fixed32,5,opt,name=relayIp" json:"relayIp,omitempty"`
	RelayPort  *uint32 `protobuf:"varint,6,opt,name=relayPort" json:"relayPort,omitempty"`
	ToUin      *uint64 `protobuf:"varint,7,opt,name=toUin" json:"toUin,omitempty"`
}

func (x *S2CHead) Reset() {
	*x = S2CHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CHead) ProtoMessage() {}

func (x *S2CHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CHead.ProtoReflect.Descriptor instead.
func (*S2CHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{7}
}

func (x *S2CHead) GetSubMsgtype() uint32 {
	if x != nil && x.SubMsgtype != nil {
		return *x.SubMsgtype
	}
	return 0
}

func (x *S2CHead) GetMsgType() uint32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *S2CHead) GetFromUin() uint64 {
	if x != nil && x.FromUin != nil {
		return *x.FromUin
	}
	return 0
}

func (x *S2CHead) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *S2CHead) GetRelayIp() uint32 {
	if x != nil && x.RelayIp != nil {
		return *x.RelayIp
	}
	return 0
}

func (x *S2CHead) GetRelayPort() uint32 {
	if x != nil && x.RelayPort != nil {
		return *x.RelayPort
	}
	return 0
}

func (x *S2CHead) GetToUin() uint64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

type TransOidbHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     *uint32 `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	ServiceType *uint32 `protobuf:"varint,2,opt,name=serviceType" json:"serviceType,omitempty"`
	Result      *uint32 `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	ErrorMsg    *string `protobuf:"bytes,4,opt,name=errorMsg" json:"errorMsg,omitempty"`
}

func (x *TransOidbHead) Reset() {
	*x = TransOidbHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransOidbHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransOidbHead) ProtoMessage() {}

func (x *TransOidbHead) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransOidbHead.ProtoReflect.Descriptor instead.
func (*TransOidbHead) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{8}
}

func (x *TransOidbHead) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *TransOidbHead) GetServiceType() uint32 {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return 0
}

func (x *TransOidbHead) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *TransOidbHead) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

var File_head_proto protoreflect.FileDescriptor

var file_head_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a,
	0x07, 0x43, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x63, 0x43, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x50, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x69, 0x63, 0x53, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x42, 0x75, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x42, 0x75, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x8c, 0x05, 0x0a, 0x06, 0x43, 0x53, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x62, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x75, 0x62, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x6e, 0x49, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x6e, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x63,
	0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x64, 0x63, 0x49, 0x64, 0x22,
	0xc1, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x06, 0x49, 0x4d, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x73,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x53, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x06, 0x63, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x73,
	0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x52, 0x07, 0x73, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x31, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x25, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x52, 0x07, 0x63, 0x32,
	0x43, 0x48, 0x65, 0x61, 0x64, 0x22, 0xda, 0x05, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x75, 0x62, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x75, 0x62, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x7a, 0x68, 0x74, 0x74, 0x70,
	0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x71, 0x7a, 0x68, 0x74, 0x74, 0x70,
	0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x7a, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x7a, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x70, 0x49, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x05, 0x73, 0x70, 0x70, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x70, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6d, 0x64,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6d, 0x64, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6f, 0x69, 0x64, 0x62, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x4f, 0x69, 0x64, 0x62, 0x48, 0x65, 0x61, 0x64, 0x52, 0x08, 0x6f, 0x69, 0x64, 0x62, 0x68, 0x65,
	0x61, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x69, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x07, 0x53, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x22, 0x7f, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4f,
	0x69, 0x64, 0x62, 0x48, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x6d, 0x73, 0x67,
}

var (
	file_head_proto_rawDescOnce sync.Once
	file_head_proto_rawDescData = file_head_proto_rawDesc
)

func file_head_proto_rawDescGZIP() []byte {
	file_head_proto_rawDescOnce.Do(func() {
		file_head_proto_rawDescData = protoimpl.X.CompressGZIP(file_head_proto_rawDescData)
	})
	return file_head_proto_rawDescData
}

var file_head_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_head_proto_goTypes = []interface{}{
	(*C2CHead)(nil),       // 0: C2CHead
	(*CSHead)(nil),        // 1: CSHead
	(*DeltaHead)(nil),     // 2: DeltaHead
	(*IMHead)(nil),        // 3: IMHead
	(*HttpConnHead)(nil),  // 4: HttpConnHead
	(*LoginSig)(nil),      // 5: LoginSig
	(*RedirectMsg)(nil),   // 6: RedirectMsg
	(*S2CHead)(nil),       // 7: S2CHead
	(*TransOidbHead)(nil), // 8: TransOidbHead
}
var file_head_proto_depIdxs = []int32{
	1, // 0: IMHead.csHead:type_name -> CSHead
	7, // 1: IMHead.s2CHead:type_name -> S2CHead
	4, // 2: IMHead.httpconnHead:type_name -> HttpConnHead
	5, // 3: IMHead.loginSig:type_name -> LoginSig
	2, // 4: IMHead.deltaHead:type_name -> DeltaHead
	0, // 5: IMHead.c2CHead:type_name -> C2CHead
	6, // 6: HttpConnHead.redirect:type_name -> RedirectMsg
	8, // 7: HttpConnHead.oidbhead:type_name -> TransOidbHead
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_head_proto_init() }
func file_head_proto_init() {
	if File_head_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_head_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2CHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpConnHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransOidbHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_head_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_head_proto_goTypes,
		DependencyIndexes: file_head_proto_depIdxs,
		MessageInfos:      file_head_proto_msgTypes,
	}.Build()
	File_head_proto = out.File
	file_head_proto_rawDesc = nil
	file_head_proto_goTypes = nil
	file_head_proto_depIdxs = nil
}
